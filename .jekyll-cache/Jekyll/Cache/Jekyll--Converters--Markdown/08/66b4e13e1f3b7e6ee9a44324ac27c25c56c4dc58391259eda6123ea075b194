I"$˛<p>I know most have probably shifted their attention to free agency, but here is my late contribution to the NBA Draft discussion.</p>

<p>In the days after the NBA Draft it is very common to come across many different sets of rankings or grades intended to assess the level of success of each NBA team‚Äôs particular draft night. These are fun to read and discuss but, in most cases, we will not know the true winners and losers for some time. The Thunder seemed to have a great night, but who knows if <a href="http://espn.go.com/nba/player/_/id/3155942/domantas-sabonis">Domantas Sabonis</a> will follow in the footsteps of his pops, <a href="https://www.youtube.com/watch?v=LW9q-0x2gu8">Arvydas</a>, and become an all-timer or not. It will take years to tell.</p>

<p>However, the conclusion of the NBA Draft does allow us to determine a different set of winners and losers. Namely, we can determine which mock drafts performed best, as the completion of the actual draft presents us with validation data to score predictions. There was an <a href="http://nyloncalculus.com/2016/06/28/grading-the-2016-nba-mock-drafts/">article on Nylon Calculus</a> which did just this; i.e., ranked several of the popular mock drafts based on accuracy. The article experimented with several methods‚Äînumber of ‚Äúhits‚Äù (correct predictions), Root Mean Squared Error (RMSE), and what I‚Äôll call a weighted absolute error.</p>

<p>Here, I decided to take a different approach and see how it compared. I used data from 8 of the 10 sites listed in the Nylon Calculus article:</p>

<ul>
  <li><a href="http://espn.go.com/nba/insider/story/_/id/16436916/chad-ford-nba-mock-draft-10-picks-boston-celtics-los-angeles-lakers-minnesota-timberwolves-more"><del>Chad Ford (ESPN)</del></a></li>
  <li><a href="http://www.draftexpress.com/nba-mock-draft/2016/">DraftExpress</a></li>
  <li><a href="http://www.cbssports.com/nba/news/nba-mock-draft-2016-lsus-ben-simmons-to-the-sixers-at-no-1-looks-to-be-done/">Gary Parrish (CBS)</a></li>
  <li><a href="http://www.cbssports.com/nba/draft/mock-draft/expert/sam-vecenie">Sam Vecenie (CBS)</a></li>
  <li><a href="http://www.nba.com/2016/news/features/scott_howard_cooper/06/23/2016-nba-mock-draft-4-0/">Scott Howard-Cooper (NBA.com)</a></li>
  <li><a href="http://www.si.com/nba/2016/06/23/nba-mock-draft-trades-buzz-ben-simmons-dragan-bender-brandon-ingram">Andrew Sharp (SI)</a></li>
  <li><a href="http://hoopshype.com/2016/06/22/nba-mock-draft-2016/"><del>Hoopshype</del></a></li>
  <li><a href="http://bleacherreport.com/articles/2647672-2016-nba-mock-draft-jonathan-wassermans-final-2-round-predictions/page/2">Jonathan Wasserman (Bleacher Report)</a></li>
  <li><a href="http://www.nbadraft.net/2016mock_draft">NBADraft.net</a></li>
  <li><a href="http://www.nbadraft.net/nba_mock_drafts/consensus">NBADraft.net User Consensus</a></li>
</ul>

<h3 id="the-basics-of-correlation">The Basics of Correlation</h3>

<p>Correlation deals with the relationship between two random variables. Correlation coefficients measure the strength of association between variables by assigning a number between -1 and 1. Generally speaking, correlation coefficients close to -1 represent strong inverse relationships, correlation coefficients close to 0 represent little association between the variables,  while correlation coefficients close to 1 represent strong positive relationships between the variables. There are three <em>main</em> flavors of the correlation coefficient used in statistics: Pearson, Spearman, and Kendall. Here, we will denote these as $r$, $\rho$, and $\tau$, respectively.</p>

<p><a href="https://en.wikipedia.org/wiki/Pearson_product-moment_correlation_coefficient">$r$ is the most familiar form of correlation</a>. It simply measures the linear association between two variables, $X$ and $Y$.</p>

\[r_{XY} = \frac{\sum_{i=1}^n (x_i - \bar{x})(y_i - \bar{y})}{\sqrt{\sum_{i=1}^n (x_i - \bar{x})^2}\sqrt{\sum_{i=1}^n (y_i - \bar{y})^2}}\]

<p>where:</p>
<ul>
  <li>$n$ is the number of observations</li>
  <li>$x_i$ is the $i^{th}$ observation of the variable $X$</li>
  <li>$y_i$ is the $i^{th}$ observation of the variable $Y$</li>
  <li>$\bar{x} = \frac{1}{n} \sum_{i=1}^n x_i$</li>
  <li>$\bar{y} = \frac{1}{n} \sum_{i=1}^n y_i$</li>
</ul>

<p>Below is an example of this calculation on a simulated dataset intended to be negatively correlated.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">scipy.stats</span> <span class="k">as</span> <span class="n">stats</span>
<span class="n">n</span> <span class="o">=</span> <span class="mi">10</span>
<span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">seed</span><span class="p">(</span><span class="mi">4277</span><span class="p">)</span>
<span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
<span class="n">Y</span> <span class="o">=</span> <span class="o">-</span><span class="n">X</span> <span class="o">+</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'X: '</span><span class="p">,</span> <span class="n">X</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'Y: '</span><span class="p">,</span> <span class="n">Y</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'r: '</span><span class="p">,</span> <span class="n">stats</span><span class="p">.</span><span class="n">pearsonr</span><span class="p">(</span><span class="n">X</span><span class="p">,</span><span class="n">Y</span><span class="p">)[</span><span class="mi">0</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>X:  [22 57 68  8 17 49 15  4 53 56]
Y:  [-16 -30 -40  29  -7 -37  13  22 -28 -19]
r:  -0.9024731385120117
</code></pre></div></div>

<p>Both <a href="https://en.wikipedia.org/wiki/Spearman%27s_rank_correlation_coefficient">Spearman‚Äôs $\rho$</a> and <a href="https://en.wikipedia.org/wiki/Kendall_rank_correlation_coefficient">Kendall‚Äôs $\tau$</a> are known as <a href="https://en.wikipedia.org/wiki/Rank_correlation">rank correlation coefficients</a> and are nonparametric methods. They remove an underlying normality assumption present in Pearson‚Äôs method. In essence, these methods are intended to answer the following question: As $X$ increases, does $Y$ tend to increase, <em>regardless of that increase being linear</em>?</p>

<p>To compute $\rho_{XY}$, we convert the raw values of the $n$ $x_i$‚Äôs and $n$ $y_i$‚Äôs to ranks, $rg_{x_i}$ and $rg_{y_i}$.  $\rho$ is then defined as $r_{rg_X, rg_Y}$, the Pearson correlation between the ranked variables. If all $n$ ranks are distinct integers, it can be computed using the following shortcut formula,</p>

\[\rho_{XY} = 1 - \frac{6 \sum_{i=1}^n d_i^2}{n(n^2 - 1)}\]

<p>where:</p>
<ul>
  <li>$d_i = rg_{x_i} - rg_{y_i}$</li>
</ul>

<p>An implementation of this formula, applied to the data generated above, is illustrated below.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">division</span>
<span class="c1"># An implementation of Spearman's rho
</span><span class="k">def</span> <span class="nf">spearman</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">raw</span> <span class="o">=</span> <span class="bp">True</span><span class="p">):</span>
    <span class="c1"># if the data are not ranked yet, we must rank them
</span>    <span class="k">if</span> <span class="n">raw</span><span class="p">:</span>
        <span class="n">rg_x</span> <span class="o">=</span> <span class="n">stats</span><span class="p">.</span><span class="n">rankdata</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">rg_y</span> <span class="o">=</span> <span class="n">stats</span><span class="p">.</span><span class="n">rankdata</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">rg_x</span> <span class="o">=</span> <span class="n">x</span>
        <span class="n">rg_y</span> <span class="o">=</span> <span class="n">y</span>
    <span class="n">rho</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">-</span> <span class="p">(</span><span class="mi">6</span><span class="o">*</span><span class="p">(((</span><span class="n">rg_x</span> <span class="o">-</span> <span class="n">rg_y</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span><span class="p">).</span><span class="nb">sum</span><span class="p">()))</span><span class="o">/</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">rg_x</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">rg_x</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">rho</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Using the same data generated in the previous example
</span><span class="k">print</span><span class="p">(</span><span class="s">"Spearman's Rho:"</span><span class="p">,</span> <span class="n">spearman</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Spearman's Rho: -0.9030303030303031
</code></pre></div></div>

<p>On the other hand, to compute Kendall‚Äôs $\tau$, we calculate:</p>

\[\tau_{XY} = \frac{C-D}{C+D}\]

<p>where:</p>
<ul>
  <li>C = $#$ of concordant pairs</li>
  <li>D = $#$ of discordant pairs</li>
</ul>

<p>Pairs of obsevations are said to be concordant if the ranks for both elements agree. This idea of concordance is best illustrated by example, as in the YouTube videos embedded below.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">YouTubeVideo</span>
<span class="c1"># Part 1
</span><span class="n">YouTubeVideo</span><span class="p">(</span><span class="s">"oXVxaSoY94k"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    &lt;iframe
        width="400"
        height="300"
        src="https://www.youtube.com/embed/oXVxaSoY94k"
        frameborder="0"
        allowfullscreen
    &gt;&lt;/iframe&gt;
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Part 2
</span><span class="n">YouTubeVideo</span><span class="p">(</span><span class="s">"V4MgE43SrgM"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    &lt;iframe
        width="400"
        height="300"
        src="https://www.youtube.com/embed/V4MgE43SrgM"
        frameborder="0"
        allowfullscreen
    &gt;&lt;/iframe&gt;
</code></pre></div></div>

<p>Below, I calculate Kendall‚Äôs $\tau$ for the simulated data.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rg_X</span><span class="p">,</span> <span class="n">rg_Y</span> <span class="o">=</span> <span class="n">stats</span><span class="p">.</span><span class="n">rankdata</span><span class="p">(</span><span class="n">X</span><span class="p">),</span> <span class="n">stats</span><span class="p">.</span><span class="n">rankdata</span><span class="p">(</span><span class="n">Y</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Kendall's tau:"</span><span class="p">,</span> <span class="n">stats</span><span class="p">.</span><span class="n">kendalltau</span><span class="p">(</span><span class="n">rg_X</span><span class="p">,</span> <span class="n">rg_Y</span><span class="p">)[</span><span class="mi">0</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Kendall's tau: -0.777777777778
</code></pre></div></div>

<h3 id="applying-rank-correlation-methods-to-nba-mock-drafts">Applying Rank Correlation Methods to NBA Mock Drafts</h3>

<p>While RMSE and absolute error are generally good ways to validate predictions, these methods are better used when the data are continuous. NBA draft data are inherently ordered and this must be taken into account when scoring predictions. Hence, I decided to assess the accuracy of the mock drafts by computing ranked correlations (Spearman‚Äôs $\rho$ and Kendall‚Äôs $\tau$) between the mocks and the actual draft. Generally speaking, $\rho &gt; \tau$, though $\rho$ is particularly sensitive to ‚Äúbad‚Äù misses.</p>

<p>Some technical details:</p>
<ul>
  <li>Andrew Sharp (SI) only had a first round mock and thus was not graded on his overall performance</li>
  <li>I dealt with drafted players that were not projected to be drafted in the following manner:
    <ul>
      <li>Let $u$ represent the number of players drafted that were not projected to be drafted and let $p_i$ represent one such player, i.e., $i \in 1, 2, \dots, u$</li>
      <li>I randomly assign (without replacement) each $p_i$ a slot in $(61, 62, \dots, 61 + u)$</li>
      <li>Consequently, correlation coefficients can change slightly with different random orderings</li>
    </ul>
  </li>
  <li>The same ‚Äúmissing‚Äù methodology applied above was applied to the second round analysis</li>
  <li>For the first round analysis, if a player was not projected to be drafted in the first round but was indeed selected in the first round, then, borrowing the notation from above, he was randomly assigned a slot in $31, 32, \dots, 31 +u$. This choice was made due to the fact that the SI mock only contained Round 1. In effect, the application of the aforementioned imputation methodology puts all Round 1 mocks on a level playing field.  It does not, for instance, seriously penalize a mock for projecting a true first rounder in the 50s‚Äîsomething the SI mock may or may not have done as well.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">os</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># read-in the data files
</span><span class="n">mocks_raw</span> <span class="o">=</span> <span class="p">{}</span>
<span class="n">actuals_raw</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">for</span> <span class="nb">file</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="n">listdir</span><span class="p">(</span><span class="s">'../supps/nba_draft'</span><span class="p">):</span>
    <span class="k">if</span> <span class="nb">file</span><span class="p">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">"Mock.csv"</span><span class="p">):</span>
        <span class="n">mocks_raw</span><span class="p">[</span><span class="nb">str</span><span class="p">(</span><span class="nb">file</span><span class="p">).</span><span class="n">split</span><span class="p">(</span><span class="s">'_'</span><span class="p">)[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">'../supps/nba_draft/'</span><span class="o">+</span><span class="nb">file</span><span class="p">)</span>
    <span class="k">elif</span> <span class="nb">file</span><span class="p">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">"Actual.csv"</span><span class="p">):</span>
        <span class="n">actuals_raw</span><span class="p">[</span><span class="nb">str</span><span class="p">(</span><span class="nb">file</span><span class="p">).</span><span class="n">split</span><span class="p">(</span><span class="s">'_'</span><span class="p">)[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">'../supps/nba_draft/'</span><span class="o">+</span><span class="nb">file</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># we eventually want to convert the raw files into properly formatted files
</span><span class="n">mocks</span> <span class="o">=</span> <span class="n">mocks_raw</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>
<span class="n">actuals</span> <span class="o">=</span> <span class="n">actuals_raw</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">de_name</span><span class="p">(</span><span class="n">l</span><span class="p">):</span>
    <span class="s">'''
    Extract player names from the DraftExpress data
    '''</span>
    <span class="n">name</span> <span class="o">=</span> <span class="s">''</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">!=</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="p">)</span><span class="o">-</span><span class="mi">2</span><span class="p">):</span>
            <span class="n">name</span> <span class="o">+=</span> <span class="n">l</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="n">name</span> <span class="o">+=</span> <span class="s">' '</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">name</span> <span class="o">+=</span> <span class="n">l</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">name</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">cbs_name</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="s">'''
    Extract player names from the CBS data
    '''</span>
    <span class="k">return</span> <span class="n">x</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="n">strip</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># DraftExpress cleaning
</span><span class="n">mocks</span><span class="p">[</span><span class="s">'DraftExpress'</span><span class="p">][</span><span class="s">'Player'</span><span class="p">]</span> <span class="o">=</span> <span class="n">mocks_raw</span><span class="p">[</span><span class="s">'DraftExpress'</span><span class="p">][</span><span class="s">'Pick'</span><span class="p">].</span><span class="nb">str</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">).</span><span class="nb">str</span><span class="p">.</span><span class="n">get</span><span class="p">(</span>
    <span class="mi">0</span><span class="p">).</span><span class="nb">str</span><span class="p">.</span><span class="n">split</span><span class="p">().</span><span class="nb">apply</span><span class="p">(</span><span class="n">de_name</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># CBSSports cleaning
</span><span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="p">[</span><span class="s">'Parrish'</span><span class="p">,</span> <span class="s">'Vecenie'</span><span class="p">]:</span>
    <span class="n">mocks</span><span class="p">[</span><span class="n">name</span><span class="p">][</span><span class="s">'Player'</span><span class="p">]</span> <span class="o">=</span> <span class="n">mocks_raw</span><span class="p">[</span><span class="n">name</span><span class="p">][</span><span class="s">'Player'</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="n">cbs_name</span><span class="p">)</span>
    <span class="c1"># Vecenie drafted AJ Hammons and Denzel Valentine twice -- in each case one
</span>    <span class="c1"># of the two picks was exactly correct (ironic?), so we'll penalize a bit
</span>    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="s">'Vecenie'</span><span class="p">:</span>
        <span class="n">mocks</span><span class="p">[</span><span class="n">name</span><span class="p">].</span><span class="n">ix</span><span class="p">[</span><span class="mi">45</span><span class="p">,</span> <span class="s">'Player'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'abcd'</span>
        <span class="n">mocks</span><span class="p">[</span><span class="n">name</span><span class="p">].</span><span class="n">ix</span><span class="p">[</span><span class="mi">13</span><span class="p">,</span> <span class="s">'Player'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'abcde'</span>
    <span class="n">mocks</span><span class="p">[</span><span class="n">name</span><span class="p">][</span><span class="s">'Player'</span><span class="p">]</span> <span class="o">=</span> <span class="n">mocks</span><span class="p">[</span><span class="n">name</span><span class="p">][</span><span class="s">'Player'</span><span class="p">].</span><span class="n">replace</span><span class="p">(</span><span class="s">'Wade Baldwin IV'</span><span class="p">,</span>
                                                          <span class="s">'Wade Baldwin'</span><span class="p">)</span>
    <span class="n">mocks</span><span class="p">[</span><span class="n">name</span><span class="p">][</span><span class="s">'Player'</span><span class="p">]</span> <span class="o">=</span> <span class="n">mocks</span><span class="p">[</span><span class="n">name</span><span class="p">][</span><span class="s">'Player'</span><span class="p">].</span><span class="n">replace</span><span class="p">(</span><span class="s">"DeAndre' Bembry"</span><span class="p">,</span>
                                                          <span class="s">'DeAndre Bembry'</span><span class="p">)</span>
    <span class="n">mocks</span><span class="p">[</span><span class="n">name</span><span class="p">][</span><span class="s">'Player'</span><span class="p">]</span> <span class="o">=</span> <span class="n">mocks</span><span class="p">[</span><span class="n">name</span><span class="p">][</span><span class="s">'Player'</span><span class="p">].</span><span class="n">replace</span><span class="p">(</span><span class="s">'Stephen Zimmerman Jr.'</span><span class="p">,</span> 
                                                      <span class="s">'Stephen Zimmerman'</span><span class="p">)</span>
    <span class="n">actuals</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">actuals</span><span class="p">[</span><span class="s">'DraftExpress'</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Bleacher Report cleaning
</span><span class="n">mocks</span><span class="p">[</span><span class="s">'BR'</span><span class="p">][</span><span class="s">'Player'</span><span class="p">]</span> <span class="o">=</span> <span class="n">mocks</span><span class="p">[</span><span class="s">'BR'</span><span class="p">][</span><span class="s">'Player'</span><span class="p">].</span><span class="n">replace</span><span class="p">(</span><span class="s">'Wade Baldwin IV'</span><span class="p">,</span>
                                                      <span class="s">'Wade Baldwin'</span><span class="p">)</span>
<span class="n">mocks</span><span class="p">[</span><span class="s">'BR'</span><span class="p">][</span><span class="s">'Player'</span><span class="p">]</span> <span class="o">=</span> <span class="n">mocks</span><span class="p">[</span><span class="s">'BR'</span><span class="p">][</span><span class="s">'Player'</span><span class="p">].</span><span class="n">replace</span><span class="p">(</span><span class="s">"DeAndre' Bembry"</span><span class="p">,</span>
                                                      <span class="s">'DeAndre Bembry'</span><span class="p">)</span>
<span class="n">actuals</span><span class="p">[</span><span class="s">'BR'</span><span class="p">]</span> <span class="o">=</span> <span class="n">actuals</span><span class="p">[</span><span class="s">'DraftExpress'</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># NBA.com cleaning
</span><span class="n">mocks</span><span class="p">[</span><span class="s">'NBA'</span><span class="p">][</span><span class="s">'Player'</span><span class="p">]</span> <span class="o">=</span> <span class="n">mocks</span><span class="p">[</span><span class="s">'NBA'</span><span class="p">][</span><span class="s">'Player'</span><span class="p">].</span><span class="n">replace</span><span class="p">(</span><span class="s">'Domatas Sabonis'</span><span class="p">,</span>
                                                        <span class="s">'Domantas Sabonis'</span><span class="p">)</span>
<span class="n">mocks</span><span class="p">[</span><span class="s">'NBA'</span><span class="p">][</span><span class="s">'Player'</span><span class="p">]</span> <span class="o">=</span> <span class="n">mocks</span><span class="p">[</span><span class="s">'NBA'</span><span class="p">][</span><span class="s">'Player'</span><span class="p">].</span><span class="n">replace</span><span class="p">(</span><span class="s">'Wade Baldwin IV'</span><span class="p">,</span>
                                                        <span class="s">'Wade Baldwin'</span><span class="p">)</span>
<span class="n">mocks</span><span class="p">[</span><span class="s">'NBA'</span><span class="p">][</span><span class="s">'Player'</span><span class="p">]</span> <span class="o">=</span> <span class="n">mocks</span><span class="p">[</span><span class="s">'NBA'</span><span class="p">][</span><span class="s">'Player'</span><span class="p">].</span><span class="n">replace</span><span class="p">(</span><span class="s">"DeAndre' Bembry"</span><span class="p">,</span>
                                                        <span class="s">'DeAndre Bembry'</span><span class="p">)</span>
<span class="n">actuals</span><span class="p">[</span><span class="s">'NBA'</span><span class="p">]</span> <span class="o">=</span> <span class="n">actuals</span><span class="p">[</span><span class="s">'DraftExpress'</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># SI cleaning
</span><span class="n">mocks</span><span class="p">[</span><span class="s">'SI'</span><span class="p">][</span><span class="s">'Player'</span><span class="p">]</span> <span class="o">=</span> <span class="n">mocks</span><span class="p">[</span><span class="s">'SI'</span><span class="p">][</span><span class="s">'Player'</span><span class="p">].</span><span class="n">replace</span><span class="p">(</span><span class="s">'WADE BALDWIN IV'</span><span class="p">,</span>
                                                      <span class="s">'WADE BALDWIN'</span><span class="p">)</span>
<span class="n">actuals</span><span class="p">[</span><span class="s">'SI'</span><span class="p">]</span> <span class="o">=</span> <span class="n">actuals</span><span class="p">[</span><span class="s">'DraftExpress'</span><span class="p">][:</span><span class="mi">30</span><span class="p">].</span><span class="n">copy</span><span class="p">()</span>
<span class="n">actuals</span><span class="p">[</span><span class="s">'SI'</span><span class="p">][</span><span class="s">'Player'</span><span class="p">]</span> <span class="o">=</span> <span class="n">actuals</span><span class="p">[</span><span class="s">'SI'</span><span class="p">][</span><span class="s">'Player'</span><span class="p">].</span><span class="nb">str</span><span class="p">.</span><span class="n">upper</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">correlations</span><span class="p">(</span><span class="n">actual</span><span class="p">,</span> <span class="n">mock</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="s">'Player'</span><span class="p">,</span> <span class="n">picknum</span> <span class="o">=</span> <span class="s">'#'</span><span class="p">):</span>
    <span class="s">'''
    Calculate tau and rho between the given mock draft and the actual draft.
    ----------------------------------------------------------------------------------
    actual: df containing the actual draft data (be careful, could differ based on 
    naming conventions of site)
    
    mock: df containing the mock draft data
    
    on: Name of var on which we the df's are merged; corresponds to names of players
    
    picknum: Name of var containing pick #'s 
    '''</span>
    <span class="n">merged</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">merge</span><span class="p">(</span><span class="n">actual</span><span class="p">,</span> <span class="n">mock</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="n">on</span><span class="p">,</span>
            <span class="n">how</span><span class="o">=</span><span class="s">'outer'</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">merged</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">on</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">i</span> <span class="ow">and</span> <span class="n">picknum</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">i</span><span class="p">:</span>
            <span class="n">merged</span> <span class="o">=</span> <span class="n">merged</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">merged</span> <span class="o">=</span> <span class="n">merged</span><span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="n">isfinite</span><span class="p">(</span><span class="n">merged</span><span class="p">[</span><span class="n">picknum</span><span class="o">+</span><span class="s">'_x'</span><span class="p">])]</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">mock</span><span class="p">)</span> <span class="o">==</span> <span class="mi">60</span><span class="p">:</span>
        <span class="n">round1</span> <span class="o">=</span> <span class="n">merged</span><span class="p">[:</span><span class="mi">30</span><span class="p">].</span><span class="n">copy</span><span class="p">()</span>
        <span class="n">round1_miss</span> <span class="o">=</span> <span class="n">round1</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">round1</span><span class="p">[</span><span class="s">'#_y'</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">30</span><span class="p">,</span> <span class="s">'#_y'</span><span class="p">].</span><span class="n">count</span><span class="p">()</span> <span class="o">+</span> <span class="mi">30</span> <span class="o">-</span> <span class="n">round1</span><span class="p">[</span><span class="s">'#_y'</span><span class="p">].</span><span class="n">count</span><span class="p">()</span>
        <span class="n">random_picks1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">choice</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">31</span><span class="p">,</span> <span class="mi">31</span><span class="o">+</span><span class="n">round1_miss</span><span class="p">),</span> <span class="n">round1_miss</span><span class="p">,</span> <span class="n">replace</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
        <span class="n">counter1</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">round1</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">round1</span><span class="p">[</span><span class="s">'#_y'</span><span class="p">]):</span>
            <span class="k">if</span> <span class="n">j</span> <span class="o">&gt;</span> <span class="mi">30</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">np</span><span class="p">.</span><span class="n">isfinite</span><span class="p">(</span><span class="n">j</span><span class="p">):</span>
                <span class="n">round1</span><span class="p">.</span><span class="n">ix</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="s">'#_y'</span><span class="p">]</span> <span class="o">=</span> <span class="n">random_picks1</span><span class="p">[</span><span class="n">counter1</span><span class="p">]</span>
                <span class="n">counter1</span> <span class="o">+=</span> <span class="mi">1</span> 
                
        <span class="n">x1_1</span><span class="p">,</span> <span class="n">x2_1</span> <span class="o">=</span> <span class="n">round1</span><span class="p">[</span><span class="n">picknum</span><span class="o">+</span><span class="s">'_x'</span><span class="p">].</span><span class="n">values</span><span class="p">,</span> <span class="n">round1</span><span class="p">[</span><span class="n">picknum</span><span class="o">+</span><span class="s">'_y'</span><span class="p">].</span><span class="n">values</span>
        <span class="n">tau_1</span> <span class="o">=</span> <span class="n">stats</span><span class="p">.</span><span class="n">kendalltau</span><span class="p">(</span><span class="n">x1_1</span><span class="p">,</span> <span class="n">x2_1</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">rho_1</span> <span class="o">=</span> <span class="n">spearman</span><span class="p">(</span><span class="n">x1_1</span><span class="p">,</span> <span class="n">x2_1</span><span class="p">,</span> <span class="n">raw</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span>
        
        <span class="n">round2</span> <span class="o">=</span> <span class="n">merged</span><span class="p">[</span><span class="mi">30</span><span class="p">:].</span><span class="n">copy</span><span class="p">()</span>
        <span class="n">round2_miss</span> <span class="o">=</span> <span class="mi">30</span> <span class="o">-</span> <span class="n">round2</span><span class="p">[</span><span class="s">'#_y'</span><span class="p">].</span><span class="n">count</span><span class="p">()</span>
        <span class="n">random_picks2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">choice</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">61</span><span class="p">,</span> <span class="mi">61</span><span class="o">+</span><span class="n">round2_miss</span><span class="p">),</span> <span class="n">round2_miss</span><span class="p">,</span> <span class="n">replace</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
        <span class="n">counter2</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">round2</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">round2</span><span class="p">[</span><span class="s">'#_y'</span><span class="p">]):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">np</span><span class="p">.</span><span class="n">isfinite</span><span class="p">(</span><span class="n">j</span><span class="p">):</span>
                <span class="n">round2</span><span class="p">.</span><span class="n">ix</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="s">'#_y'</span><span class="p">]</span> <span class="o">=</span> <span class="n">random_picks2</span><span class="p">[</span><span class="n">counter2</span><span class="p">]</span>
                <span class="n">counter2</span> <span class="o">+=</span> <span class="mi">1</span> 
        
        <span class="n">x1_2</span><span class="p">,</span> <span class="n">x2_2</span> <span class="o">=</span> <span class="n">round2</span><span class="p">[</span><span class="n">picknum</span><span class="o">+</span><span class="s">'_x'</span><span class="p">].</span><span class="n">values</span><span class="p">,</span> <span class="n">round2</span><span class="p">[</span><span class="n">picknum</span><span class="o">+</span><span class="s">'_y'</span><span class="p">].</span><span class="n">values</span>
        <span class="n">tau_2</span> <span class="o">=</span> <span class="n">stats</span><span class="p">.</span><span class="n">kendalltau</span><span class="p">(</span><span class="n">x1_2</span><span class="p">,</span> <span class="n">x2_2</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">rho_2</span> <span class="o">=</span> <span class="n">spearman</span><span class="p">(</span><span class="n">x1_2</span><span class="p">,</span> <span class="n">x2_2</span><span class="p">,</span> <span class="n">raw</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span>
        
        <span class="n">full</span> <span class="o">=</span> <span class="n">merged</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>
        <span class="n">full_miss</span> <span class="o">=</span> <span class="mi">60</span> <span class="o">-</span> <span class="n">full</span><span class="p">[</span><span class="s">'#_y'</span><span class="p">].</span><span class="n">count</span><span class="p">()</span>
        <span class="n">random_picks3</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">choice</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">61</span><span class="p">,</span> <span class="mi">61</span><span class="o">+</span><span class="n">full_miss</span><span class="p">),</span> <span class="n">full_miss</span><span class="p">,</span> <span class="n">replace</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
        <span class="n">counter3</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">full</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">full</span><span class="p">[</span><span class="s">'#_y'</span><span class="p">]):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">np</span><span class="p">.</span><span class="n">isfinite</span><span class="p">(</span><span class="n">j</span><span class="p">):</span>
                <span class="n">full</span><span class="p">.</span><span class="n">ix</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="s">'#_y'</span><span class="p">]</span> <span class="o">=</span> <span class="n">random_picks3</span><span class="p">[</span><span class="n">counter3</span><span class="p">]</span>
                <span class="n">counter3</span> <span class="o">+=</span> <span class="mi">1</span> 
        
        <span class="n">x1_full</span><span class="p">,</span> <span class="n">x2_full</span> <span class="o">=</span> <span class="n">full</span><span class="p">[</span><span class="n">picknum</span><span class="o">+</span><span class="s">'_x'</span><span class="p">].</span><span class="n">values</span><span class="p">,</span> <span class="n">full</span><span class="p">[</span><span class="n">picknum</span><span class="o">+</span><span class="s">'_y'</span><span class="p">].</span><span class="n">values</span>
        <span class="n">tau_full</span> <span class="o">=</span> <span class="n">stats</span><span class="p">.</span><span class="n">kendalltau</span><span class="p">(</span><span class="n">x1_full</span><span class="p">,</span> <span class="n">x2_full</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">rho_full</span> <span class="o">=</span> <span class="n">spearman</span><span class="p">(</span><span class="n">x1_full</span><span class="p">,</span> <span class="n">x2_full</span><span class="p">,</span> <span class="n">raw</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">tau_1</span><span class="p">,</span> <span class="n">rho_1</span><span class="p">,</span> <span class="n">tau_2</span><span class="p">,</span> <span class="n">rho_2</span><span class="p">,</span> <span class="n">tau_full</span><span class="p">,</span> <span class="n">rho_full</span>
                
    <span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="n">mock</span><span class="p">)</span> <span class="o">==</span> <span class="mi">30</span><span class="p">:</span>
        <span class="n">round1</span> <span class="o">=</span> <span class="n">merged</span>
        <span class="n">round1_miss</span> <span class="o">=</span> <span class="n">round1</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">round1</span><span class="p">[</span><span class="s">'#_y'</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">30</span><span class="p">,</span> <span class="s">'#_y'</span><span class="p">].</span><span class="n">count</span><span class="p">()</span> <span class="o">+</span> <span class="mi">30</span> <span class="o">-</span> <span class="n">round1</span><span class="p">[</span><span class="s">'#_y'</span><span class="p">].</span><span class="n">count</span><span class="p">()</span>
        <span class="n">random_picks1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">choice</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">31</span><span class="p">,</span> <span class="mi">31</span><span class="o">+</span><span class="n">round1_miss</span><span class="p">),</span> <span class="n">round1_miss</span><span class="p">,</span> <span class="n">replace</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
        <span class="n">counter1</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">round1</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">round1</span><span class="p">[</span><span class="s">'#_y'</span><span class="p">]):</span>
            <span class="k">if</span> <span class="n">j</span> <span class="o">&gt;</span> <span class="mi">30</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">np</span><span class="p">.</span><span class="n">isfinite</span><span class="p">(</span><span class="n">j</span><span class="p">):</span>
                <span class="n">round1</span><span class="p">.</span><span class="n">ix</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="s">'#_y'</span><span class="p">]</span> <span class="o">=</span> <span class="n">random_picks1</span><span class="p">[</span><span class="n">counter1</span><span class="p">]</span>
                <span class="n">counter1</span> <span class="o">+=</span> <span class="mi">1</span>
                
        <span class="n">x1_1</span><span class="p">,</span> <span class="n">x2_1</span> <span class="o">=</span> <span class="n">round1</span><span class="p">[</span><span class="n">picknum</span><span class="o">+</span><span class="s">'_x'</span><span class="p">].</span><span class="n">values</span><span class="p">,</span> <span class="n">round1</span><span class="p">[</span><span class="n">picknum</span><span class="o">+</span><span class="s">'_y'</span><span class="p">].</span><span class="n">values</span>
        <span class="n">tau_1</span> <span class="o">=</span> <span class="n">stats</span><span class="p">.</span><span class="n">kendalltau</span><span class="p">(</span><span class="n">x1_1</span><span class="p">,</span> <span class="n">x2_1</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">rho_1</span> <span class="o">=</span> <span class="n">spearman</span><span class="p">(</span><span class="n">x1_1</span><span class="p">,</span> <span class="n">x2_1</span><span class="p">,</span> <span class="n">raw</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span>

        <span class="k">return</span> <span class="n">tau_1</span><span class="p">,</span> <span class="n">rho_1</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># create dicts of correlation results and store draft names in list
</span><span class="n">drafts</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">taus</span> <span class="o">=</span> <span class="p">{</span><span class="s">'Round1'</span><span class="p">:</span> <span class="p">[],</span>
       <span class="s">'Round2'</span><span class="p">:</span> <span class="p">[],</span>
       <span class="s">'Full'</span><span class="p">:</span> <span class="p">[]}</span>
<span class="n">rhos</span> <span class="o">=</span> <span class="p">{</span><span class="s">'Round1'</span><span class="p">:</span> <span class="p">[],</span>
       <span class="s">'Round2'</span><span class="p">:</span> <span class="p">[],</span>
       <span class="s">'Full'</span><span class="p">:</span> <span class="p">[]}</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">actuals</span><span class="p">:</span>
    <span class="n">drafts</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    <span class="n">results</span> <span class="o">=</span> <span class="n">correlations</span><span class="p">(</span><span class="n">actuals</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">mocks</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">results</span><span class="p">)</span> <span class="o">==</span> <span class="mi">6</span><span class="p">:</span>
        <span class="n">taus</span><span class="p">[</span><span class="s">'Round1'</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">results</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="n">rhos</span><span class="p">[</span><span class="s">'Round1'</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">results</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
        <span class="n">taus</span><span class="p">[</span><span class="s">'Round2'</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">results</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
        <span class="n">rhos</span><span class="p">[</span><span class="s">'Round2'</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">results</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span>
        <span class="n">taus</span><span class="p">[</span><span class="s">'Full'</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">results</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span>
        <span class="n">rhos</span><span class="p">[</span><span class="s">'Full'</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">results</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span>
    <span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="n">results</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
        <span class="n">taus</span><span class="p">[</span><span class="s">'Round1'</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">results</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="n">rhos</span><span class="p">[</span><span class="s">'Round1'</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">results</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
        <span class="n">taus</span><span class="p">[</span><span class="s">'Round2'</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">nan</span><span class="p">)</span>
        <span class="n">rhos</span><span class="p">[</span><span class="s">'Round2'</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">nan</span><span class="p">)</span>
        <span class="n">taus</span><span class="p">[</span><span class="s">'Full'</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">nan</span><span class="p">)</span>
        <span class="n">rhos</span><span class="p">[</span><span class="s">'Full'</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">nan</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># create a df of results
</span><span class="n">draft_scores</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s">'Tau_Round1'</span><span class="p">:</span> <span class="n">taus</span><span class="p">[</span><span class="s">'Round1'</span><span class="p">],</span> 
                             <span class="s">'Tau_Round2'</span><span class="p">:</span> <span class="n">taus</span><span class="p">[</span><span class="s">'Round2'</span><span class="p">],</span>
                             <span class="s">'Tau_Overall'</span><span class="p">:</span> <span class="n">taus</span><span class="p">[</span><span class="s">'Full'</span><span class="p">],</span>
                             <span class="s">'Rho_Round1'</span><span class="p">:</span> <span class="n">rhos</span><span class="p">[</span><span class="s">'Round1'</span><span class="p">],</span> 
                             <span class="s">'Rho_Round2'</span><span class="p">:</span> <span class="n">rhos</span><span class="p">[</span><span class="s">'Round2'</span><span class="p">],</span>
                             <span class="s">'Rho_Overall'</span><span class="p">:</span> <span class="n">rhos</span><span class="p">[</span><span class="s">'Full'</span><span class="p">]},</span> <span class="n">index</span> <span class="o">=</span> <span class="n">drafts</span><span class="p">)</span>
</code></pre></div></div>

<p>In the table below, I‚Äôve sorted the results by Kendall‚Äôs $\tau$ for the entire draft (which by default places SI last). I personally think that Kendall‚Äôs $\tau$ does a better job than Spearman‚Äôs $\rho$ because it is not nearly as sensitive to ‚Äúbad‚Äù misses. For instance, Spearman‚Äôs $\rho$ seriously penalizes several of the mocks for their second round performance. I would expect second round scores to be considerbaly lower than those of the first round due to the inclusion of first round projections (e.g., <a href="http://www.sbnation.com/nba/2016/6/23/11873304/nba-draft-2016-deyonta-davis-boston-celtics-trade-memphis-grizzlies">Deyonta Davis</a>) as well as the inherent unpredictability and obscurity of those picks. That said, zero‚Äîor even negative‚Äîcorrelation is not intuitively appealing. Regardless of the metric used, DraftExpress is the clear winner, as was also the case in the Nylon Calculus article.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">draft_scores</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="s">'Tau_Overall'</span><span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>

<div>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Rho_Overall</th>
      <th>Rho_Round1</th>
      <th>Rho_Round2</th>
      <th>Tau_Overall</th>
      <th>Tau_Round1</th>
      <th>Tau_Round2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>DraftExpress</th>
      <td>0.863823</td>
      <td>0.728365</td>
      <td>0.404894</td>
      <td>0.726554</td>
      <td>0.604598</td>
      <td>0.540230</td>
    </tr>
    <tr>
      <th>NBA</th>
      <td>0.798138</td>
      <td>0.468743</td>
      <td>0.315907</td>
      <td>0.649718</td>
      <td>0.457471</td>
      <td>0.512644</td>
    </tr>
    <tr>
      <th>NBADraft</th>
      <td>0.806891</td>
      <td>0.528142</td>
      <td>-0.008454</td>
      <td>0.648588</td>
      <td>0.425287</td>
      <td>0.388506</td>
    </tr>
    <tr>
      <th>Vecenie</th>
      <td>0.801278</td>
      <td>0.382870</td>
      <td>0.198220</td>
      <td>0.641808</td>
      <td>0.388506</td>
      <td>0.512644</td>
    </tr>
    <tr>
      <th>Parrish</th>
      <td>0.765351</td>
      <td>0.554171</td>
      <td>0.236707</td>
      <td>0.637288</td>
      <td>0.494253</td>
      <td>0.540230</td>
    </tr>
    <tr>
      <th>NBADraftConsensus</th>
      <td>0.752931</td>
      <td>0.415350</td>
      <td>-0.145717</td>
      <td>0.624859</td>
      <td>0.416092</td>
      <td>0.365517</td>
    </tr>
    <tr>
      <th>BR</th>
      <td>0.764379</td>
      <td>0.349722</td>
      <td>-0.008676</td>
      <td>0.596610</td>
      <td>0.379310</td>
      <td>0.439080</td>
    </tr>
    <tr>
      <th>SI</th>
      <td>NaN</td>
      <td>0.486318</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.494253</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
</div>

<p>Below, I‚Äôve included a full comparison of several rankings.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ranks</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s">"Kendall's Tau"</span><span class="p">:</span> <span class="n">draft_scores</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="s">'Tau_Overall'</span><span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="bp">False</span><span class="p">).</span><span class="n">index</span><span class="p">,</span>
                      <span class="s">"Spearman's Rho"</span><span class="p">:</span> <span class="n">draft_scores</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="s">'Rho_Overall'</span><span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="bp">False</span><span class="p">).</span><span class="n">index</span><span class="p">,</span>
                      <span class="s">"Kendall's Tau Round 1"</span><span class="p">:</span> <span class="n">draft_scores</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="s">'Rho_Round1'</span><span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="bp">False</span><span class="p">).</span><span class="n">index</span><span class="p">,</span>
                      <span class="s">'Nylon Calculus'</span><span class="p">:</span> <span class="p">[</span><span class="s">'DraftExpress'</span><span class="p">,</span> <span class="s">'NBADraft'</span><span class="p">,</span> <span class="s">'NBA'</span><span class="p">,</span> <span class="s">'Parrish'</span><span class="p">,</span> <span class="s">'Vecenie'</span><span class="p">,</span>
                                      <span class="s">'NBADraftConsensus'</span><span class="p">,</span> <span class="s">'BR'</span><span class="p">,</span> <span class="s">'SI'</span><span class="p">]</span>
                              <span class="p">})</span>
<span class="n">ranks</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">9</span><span class="p">)</span> 
<span class="n">ranks</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">'Rank'</span>
<span class="n">ranks</span>
</code></pre></div></div>

<div>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Kendall's Tau</th>
      <th>Kendall's Tau Round 1</th>
      <th>Nylon Calculus</th>
      <th>Spearman's Rho</th>
    </tr>
    <tr>
      <th>Rank</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <td>DraftExpress</td>
      <td>DraftExpress</td>
      <td>DraftExpress</td>
      <td>DraftExpress</td>
    </tr>
    <tr>
      <th>2</th>
      <td>NBA</td>
      <td>Parrish</td>
      <td>NBADraft</td>
      <td>NBADraft</td>
    </tr>
    <tr>
      <th>3</th>
      <td>NBADraft</td>
      <td>NBADraft</td>
      <td>NBA</td>
      <td>Vecenie</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Vecenie</td>
      <td>SI</td>
      <td>Parrish</td>
      <td>NBA</td>
    </tr>
    <tr>
      <th>5</th>
      <td>Parrish</td>
      <td>NBA</td>
      <td>Vecenie</td>
      <td>Parrish</td>
    </tr>
    <tr>
      <th>6</th>
      <td>NBADraftConsensus</td>
      <td>NBADraftConsensus</td>
      <td>NBADraftConsensus</td>
      <td>BR</td>
    </tr>
    <tr>
      <th>7</th>
      <td>BR</td>
      <td>Vecenie</td>
      <td>BR</td>
      <td>NBADraftConsensus</td>
    </tr>
    <tr>
      <th>8</th>
      <td>SI</td>
      <td>BR</td>
      <td>SI</td>
      <td>SI</td>
    </tr>
  </tbody>
</table>
</div>

<p>I think my rankings compare favorably with the weighted absolute error-based rankings presented in the Nylon Calculus article. There are a few switched positions here and there, but I would argue that in the aggregrate they are very similar. Perhaps the most glaring discrepancy concerns the NBADraft.net rankings. By Kendall‚Äôs $\tau$, it was the fourth best mock, while Nylon Calculus placed it second. In the end, I believe that rank correlation-based metrics are more suitable to assess the mock draft predictions, as NBA draft picks are ordinal by nature.</p>

<p>The rank methods are not perfect, however. Most notably, it should be a bigger deal to miss the first pick by one slot than the $52^{nd}$ selection by one slot. This is not captured in the correlation methods presented here and hopefully can be incorporated in the future. Nevertheless, I would still lend a good deal of credence to the correlation-based methods.</p>
:ET