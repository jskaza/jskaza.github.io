I"€3<p>Yesterday, I came across a neat way to approximate œÄ using <a href="https://en.wikipedia.org/wiki/Monte_Carlo_method">Monte Carlo simulation</a>. I hadn‚Äôt seen this exercise before, but I think it is understandable and illustrative, so I decided to give it a try using both Excel and Python.</p>

<p><strong>How it Works</strong></p>

<p>Imagine we have a unit circle inscribed within a 2x2 square.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlim</span><span class="p">(</span><span class="n">xmin</span><span class="o">=-</span><span class="mi">1</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylim</span><span class="p">(</span><span class="n">ymin</span><span class="o">=-</span><span class="mi">1</span><span class="p">)</span>
<span class="n">circle1</span><span class="o">=</span><span class="n">plt</span><span class="p">.</span><span class="n">Circle</span><span class="p">((</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="mi">1</span><span class="p">,</span><span class="n">color</span><span class="o">=</span><span class="s">'MidnightBlue'</span><span class="p">)</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">gcf</span><span class="p">()</span>
<span class="n">fig</span><span class="p">.</span><span class="n">gca</span><span class="p">().</span><span class="n">add_artist</span><span class="p">(</span><span class="n">circle1</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="n">set_size_inches</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="/images/2014-08-19-monte-carlo-estimation-of-pi_2_0.png" alt="png" /></p>

<p>Now, let‚Äôs zoom into the top-right quadrant of this plot.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">circle2</span><span class="o">=</span><span class="n">plt</span><span class="p">.</span><span class="n">Circle</span><span class="p">((</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="mi">1</span><span class="p">,</span><span class="n">color</span><span class="o">=</span><span class="s">'MidnightBlue'</span><span class="p">)</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">gcf</span><span class="p">()</span>
<span class="n">fig</span><span class="p">.</span><span class="n">gca</span><span class="p">().</span><span class="n">add_artist</span><span class="p">(</span><span class="n">circle2</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="n">set_size_inches</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="/images/2014-08-19-monte-carlo-estimation-of-pi_4_0.png" alt="png" /></p>

<p>The area of this entire quadrant is equal to r<sup>2</sup> (since the base of the square equals the circle‚Äôs radius). The area in blue is a quarter-circle and is equal to (1/4)œÄr<sup>2</sup>. Thus, if one were to plot points within this quadrant at random, we would expect that œÄ/4 (approximately 78.54%) would lie within the blue region. Theoretically, then, to estimate œÄ, one can generate a bunch of coordinate pairs with x and y values between 0 and 1. If the distance of a particular point from the origin is greater than 1 (greater than the radius of the circle), it is classified as outside of the circle. Otherwise, it is contained within the circle. With a large enough sample, the proportion of points within the circle should be close to œÄ/4. We can then multiply this proportion by 4 to estimate œÄ.</p>

<p>To get the distance of a point from the origin, we use the <a href="https://en.wikipedia.org/wiki/Pythagorean_theorem">Pythagorean theorem</a>:</p>

<p>Distance=$\sqrt{x^{2} + y^{2}}$.</p>

<p><strong>Executing this using Excel</strong></p>

<p>To carry out this process in Excel, I created two separate sets of
11,175 random numbers between 0 and 1 using the <code class="language-plaintext highlighter-rouge">=RAND()</code> function. I then
calculated the distance for each pair. Next, I used an <code class="language-plaintext highlighter-rouge">=IF()</code> function to
generate indicator variables corresponding to whether or not the
calculated distance was greater than 1. Finally, I used <code class="language-plaintext highlighter-rouge">=COUNTIF()</code> to
count those distances¬†less than or equal to 1, divided this count by the
total number of distances calculated (11,175), and multiplied this
fraction by 4 to get an estimate of œÄ.</p>

<p>Once all of this is in place, it is quick and easy to get estimates by
pressing <code class="language-plaintext highlighter-rouge">F9</code> to refresh the random numbers.</p>

<p>Here are 10 of the estimates I generated (accurate to 5 digits):</p>

<p>3.14917, 3.12447, 3.14309, 3.13879, 3.14452, 3.14130, 3.12197, 3.12841,
3.13128, 3.15347</p>

<p>For reference, the true value of œÄ to 5 digits is 3.14159.</p>

<p><a href="https://jskaza.files.wordpress.com/2014/08/monte_carlo_est_pi.xls">Here is a
spreadsheet</a>¬†setup
to carry out this simulation exercise.</p>

<p><strong>Executing this using Python</strong></p>

<p>Using 100,000 random number pairs, here are 10 estimates that I got:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#single point estimate
</span><span class="kn">import</span> <span class="nn">random</span>
<span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">division</span>

<span class="n">i</span><span class="o">=</span><span class="mi">0</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
    <span class="n">n</span><span class="o">=</span><span class="mi">100000</span> <span class="c1">#number of random number pairs
</span>    <span class="n">my_randoms</span> <span class="o">=</span> <span class="p">[]</span> <span class="c1">#create empty list to store distance calculations
</span>    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">n</span><span class="p">):</span>
        <span class="n">my_randoms</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">sqrt</span><span class="p">((</span><span class="n">random</span><span class="p">.</span><span class="n">random</span><span class="p">()</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">random</span><span class="p">.</span><span class="n">random</span><span class="p">()</span><span class="o">**</span><span class="mi">2</span><span class="p">)))</span> <span class="c1">#distance calculation
</span>    <span class="n">pi_estimate</span><span class="o">=</span><span class="p">(</span><span class="nb">sum</span><span class="p">(</span><span class="n">x</span><span class="o">&lt;=</span><span class="mi">1</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">my_randoms</span><span class="p">)</span><span class="o">/</span><span class="n">n</span><span class="p">)</span><span class="o">*</span><span class="mi">4</span>
    <span class="k">print</span><span class="p">(</span><span class="n">pi_estimate</span><span class="p">,)</span>
    <span class="n">i</span><span class="o">+=</span><span class="mi">1</span>
    
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>3.13704
3.1436
3.13956
3.14492
3.13784
3.1414
3.14296
3.13688
3.144
3.146
</code></pre></div></div>

<p>Simulating this process programatically also allowed me to go one step
further. Again, I used the random number pairs to generate an estimate
of œÄ (this time ‚Äúonly‚Äù 10,000 pairs to spare¬†my computer from the extra
calculations). However, using a nested for-loop, I repeated this process
10,000 times! One¬†can then take the average of the 10,000 œÄ estimates to
get an even better approximation of œÄ. Additionally, one can test the
validity of the <a href="http://en.wikipedia.org/wiki/Central_limit_theorem">Central Limit
Theorem</a>¬†to see if
the 10,000 estimates are normally distributed.</p>

<p>Here‚Äôs my¬†Python code to do just this:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># average of 10,000 estimates
</span><span class="kn">import</span> <span class="nn">random</span>
<span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">division</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="n">n1</span><span class="o">=</span> <span class="mi">10000</span> <span class="c1"># number of pi estimates 
</span><span class="n">n2</span><span class="o">=</span> <span class="mi">10000</span> <span class="c1"># number of random number pairs to use in pi estimate
</span>
<span class="n">pi_list</span><span class="o">=</span><span class="p">[]</span> <span class="c1"># create empty list to store pi estimates
</span>
<span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">n1</span><span class="p">):</span> <span class="c1"># n1 iterations
</span>    <span class="n">my_randoms</span><span class="o">=</span><span class="p">[]</span>  <span class="c1"># create empty list to store distance calculations
</span>    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">n2</span><span class="p">):</span>
        <span class="n">my_randoms</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">sqrt</span><span class="p">((</span><span class="n">random</span><span class="p">.</span><span class="n">random</span><span class="p">()</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">random</span><span class="p">.</span><span class="n">random</span><span class="p">()</span><span class="o">**</span><span class="mi">2</span><span class="p">)))</span> <span class="c1"># distance calculation
</span>    <span class="n">pi_list</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="nb">sum</span><span class="p">(</span><span class="n">x</span><span class="o">&lt;=</span><span class="mi">1</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">my_randoms</span><span class="p">)</span><span class="o">/</span><span class="n">n2</span><span class="p">)</span><span class="o">*</span><span class="mi">4</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">"Estimate:"</span><span class="p">,</span> <span class="nb">sum</span><span class="p">(</span><span class="n">pi_list</span><span class="p">)</span> <span class="o">/</span> <span class="nb">float</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">pi_list</span><span class="p">)))</span> <span class="c1"># average pi estimate
</span>
<span class="n">_</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">hist</span><span class="p">(</span><span class="n">pi_list</span><span class="p">)</span> <span class="c1"># histogram of pi estimates
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Estimate: 3.141337599999959
</code></pre></div></div>

<p><img src="/images/2014-08-19-monte-carlo-estimation-of-pi_8_1.png" alt="png" /></p>

:ET